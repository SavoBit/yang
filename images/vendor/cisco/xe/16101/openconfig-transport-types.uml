'Download plantuml from http://plantuml.sourceforge.net/ 
'Generate png with java -jar plantuml.jar <file> 
'Output in img/<module>.png 
'If Java spits out memory error increase heap size with java -Xmx1024m  -jar plantuml.jar <file> 
@startuml img/openconfig-transport-types.png 
hide empty fields 
hide empty methods 
hide <<case>> circle
hide <<augment>> circle
hide <<choice>> circle
hide <<leafref>> stereotype
hide <<leafref>> circle
page 1x1 
Title openconfig-transport-types 
package "oc-platform-types:openconfig-platform-types" as oc_platform_types_openconfig_platform_types { 
} 
package "oc-ext:openconfig-extensions" as oc_ext_openconfig_extensions { 
} 
note top of oc_opt_types_openconfig_transport_types : <b>Namespace: </b> http://openconfig.net/yang/transport-types \n<b>Prefix: </b> oc-opt-types \n<b>Organization : </b>\nOpenConfig working group \n<b>Contact : </b>\nOpenConfig working group \nwww.openconfig.net \n<b>Revision : </b> 2017-08-16 \n
package "oc-opt-types:openconfig-transport-types" as oc_opt_types_openconfig_transport_types { 
oc_platform_types_openconfig_platform_types +-- oc_opt_types_openconfig_transport_types
oc_ext_openconfig_extensions +-- oc_opt_types_openconfig_transport_types
class "openconfig-transport-types" as openconfig_transport_types << (M, #33CCFF) module>> 
class "frequency-type" as frequency_type << (T, YellowGreen) typedef>>
frequency_type : uint64
enum "admin-state-type" as openconfig_transport_types_I_admin_state_type {
ENABLED
DISABLED
MAINT
}
enum "loopback-mode-type" as openconfig_transport_types_I_loopback_mode_type {
NONE
FACILITY
TERMINAL
}
class "avg-min-max-instant-stats-precision2-ps-nm" as openconfig_transport_types_I_avg_min_max_instant_stats_precision2_ps_nm_grouping <<(G,Lime) grouping>> 
openconfig_transport_types_I_avg_min_max_instant_stats_precision2_ps_nm_grouping : instant : decimal64   {ps-nm}
openconfig_transport_types_I_avg_min_max_instant_stats_precision2_ps_nm_grouping : avg : decimal64   {ps-nm}
openconfig_transport_types_I_avg_min_max_instant_stats_precision2_ps_nm_grouping : min : decimal64   {ps-nm}
openconfig_transport_types_I_avg_min_max_instant_stats_precision2_ps_nm_grouping : max : decimal64   {ps-nm}
class "avg-min-max-instant-stats-precision2-ps" as openconfig_transport_types_I_avg_min_max_instant_stats_precision2_ps_grouping <<(G,Lime) grouping>> 
openconfig_transport_types_I_avg_min_max_instant_stats_precision2_ps_grouping : instant : decimal64   {ps}
openconfig_transport_types_I_avg_min_max_instant_stats_precision2_ps_grouping : avg : decimal64   {ps}
openconfig_transport_types_I_avg_min_max_instant_stats_precision2_ps_grouping : min : decimal64   {ps}
openconfig_transport_types_I_avg_min_max_instant_stats_precision2_ps_grouping : max : decimal64   {ps}
class "avg-min-max-instant-stats-precision2-ps2" as openconfig_transport_types_I_avg_min_max_instant_stats_precision2_ps2_grouping <<(G,Lime) grouping>> 
openconfig_transport_types_I_avg_min_max_instant_stats_precision2_ps2_grouping : instant : decimal64   {ps^2}
openconfig_transport_types_I_avg_min_max_instant_stats_precision2_ps2_grouping : avg : decimal64   {ps^2}
openconfig_transport_types_I_avg_min_max_instant_stats_precision2_ps2_grouping : min : decimal64   {ps^2}
openconfig_transport_types_I_avg_min_max_instant_stats_precision2_ps2_grouping : max : decimal64   {ps^2}
class "avg-min-max-instant-stats-precision18-ber" as openconfig_transport_types_I_avg_min_max_instant_stats_precision18_ber_grouping <<(G,Lime) grouping>> 
openconfig_transport_types_I_avg_min_max_instant_stats_precision18_ber_grouping : instant : decimal64   {bit-errors-per-second}
openconfig_transport_types_I_avg_min_max_instant_stats_precision18_ber_grouping : avg : decimal64   {bit-errors-per-second}
openconfig_transport_types_I_avg_min_max_instant_stats_precision18_ber_grouping : min : decimal64   {bit-errors-per-second}
openconfig_transport_types_I_avg_min_max_instant_stats_precision18_ber_grouping : max : decimal64   {bit-errors-per-second}
class "oc-platform-types:OPENCONFIG_HARDWARE_COMPONENT" as oc_platform_types_OPENCONFIG_HARDWARE_COMPONENT << (I,Silver) identity>> 
class "TRIBUTARY_PROTOCOL_TYPE" as TRIBUTARY_PROTOCOL_TYPE << (I,Silver) identity>> 
class "PROT_1GE" as PROT_1GE << (I,Silver) identity>> 
TRIBUTARY_PROTOCOL_TYPE <|-- PROT_1GE 
class "PROT_OC48" as PROT_OC48 << (I,Silver) identity>> 
TRIBUTARY_PROTOCOL_TYPE <|-- PROT_OC48 
class "PROT_STM16" as PROT_STM16 << (I,Silver) identity>> 
TRIBUTARY_PROTOCOL_TYPE <|-- PROT_STM16 
class "PROT_10GE_LAN" as PROT_10GE_LAN << (I,Silver) identity>> 
TRIBUTARY_PROTOCOL_TYPE <|-- PROT_10GE_LAN 
class "PROT_10GE_WAN" as PROT_10GE_WAN << (I,Silver) identity>> 
TRIBUTARY_PROTOCOL_TYPE <|-- PROT_10GE_WAN 
class "PROT_OC192" as PROT_OC192 << (I,Silver) identity>> 
TRIBUTARY_PROTOCOL_TYPE <|-- PROT_OC192 
class "PROT_STM64" as PROT_STM64 << (I,Silver) identity>> 
TRIBUTARY_PROTOCOL_TYPE <|-- PROT_STM64 
class "PROT_OTU2" as PROT_OTU2 << (I,Silver) identity>> 
TRIBUTARY_PROTOCOL_TYPE <|-- PROT_OTU2 
class "PROT_OTU2E" as PROT_OTU2E << (I,Silver) identity>> 
TRIBUTARY_PROTOCOL_TYPE <|-- PROT_OTU2E 
class "PROT_OTU1E" as PROT_OTU1E << (I,Silver) identity>> 
TRIBUTARY_PROTOCOL_TYPE <|-- PROT_OTU1E 
class "PROT_ODU2" as PROT_ODU2 << (I,Silver) identity>> 
TRIBUTARY_PROTOCOL_TYPE <|-- PROT_ODU2 
class "PROT_ODU2E" as PROT_ODU2E << (I,Silver) identity>> 
TRIBUTARY_PROTOCOL_TYPE <|-- PROT_ODU2E 
class "PROT_40GE" as PROT_40GE << (I,Silver) identity>> 
TRIBUTARY_PROTOCOL_TYPE <|-- PROT_40GE 
class "PROT_OC768" as PROT_OC768 << (I,Silver) identity>> 
TRIBUTARY_PROTOCOL_TYPE <|-- PROT_OC768 
class "PROT_STM256" as PROT_STM256 << (I,Silver) identity>> 
TRIBUTARY_PROTOCOL_TYPE <|-- PROT_STM256 
class "PROT_OTU3" as PROT_OTU3 << (I,Silver) identity>> 
TRIBUTARY_PROTOCOL_TYPE <|-- PROT_OTU3 
class "PROT_ODU3" as PROT_ODU3 << (I,Silver) identity>> 
TRIBUTARY_PROTOCOL_TYPE <|-- PROT_ODU3 
class "PROT_100GE" as PROT_100GE << (I,Silver) identity>> 
TRIBUTARY_PROTOCOL_TYPE <|-- PROT_100GE 
class "PROT_100G_MLG" as PROT_100G_MLG << (I,Silver) identity>> 
TRIBUTARY_PROTOCOL_TYPE <|-- PROT_100G_MLG 
class "PROT_OTU4" as PROT_OTU4 << (I,Silver) identity>> 
TRIBUTARY_PROTOCOL_TYPE <|-- PROT_OTU4 
class "PROT_OTUCN" as PROT_OTUCN << (I,Silver) identity>> 
TRIBUTARY_PROTOCOL_TYPE <|-- PROT_OTUCN 
class "PROT_ODUCN" as PROT_ODUCN << (I,Silver) identity>> 
TRIBUTARY_PROTOCOL_TYPE <|-- PROT_ODUCN 
class "PROT_ODU4" as PROT_ODU4 << (I,Silver) identity>> 
TRIBUTARY_PROTOCOL_TYPE <|-- PROT_ODU4 
class "TRANSCEIVER_FORM_FACTOR_TYPE" as TRANSCEIVER_FORM_FACTOR_TYPE << (I,Silver) identity>> 
class "CFP" as CFP << (I,Silver) identity>> 
TRANSCEIVER_FORM_FACTOR_TYPE <|-- CFP 
class "CFP2" as CFP2 << (I,Silver) identity>> 
TRANSCEIVER_FORM_FACTOR_TYPE <|-- CFP2 
class "CFP2_ACO" as CFP2_ACO << (I,Silver) identity>> 
TRANSCEIVER_FORM_FACTOR_TYPE <|-- CFP2_ACO 
class "CFP4" as CFP4 << (I,Silver) identity>> 
TRANSCEIVER_FORM_FACTOR_TYPE <|-- CFP4 
class "QSFP" as QSFP << (I,Silver) identity>> 
TRANSCEIVER_FORM_FACTOR_TYPE <|-- QSFP 
class "QSFP_PLUS" as QSFP_PLUS << (I,Silver) identity>> 
TRANSCEIVER_FORM_FACTOR_TYPE <|-- QSFP_PLUS 
class "QSFP28" as QSFP28 << (I,Silver) identity>> 
TRANSCEIVER_FORM_FACTOR_TYPE <|-- QSFP28 
class "CPAK" as CPAK << (I,Silver) identity>> 
TRANSCEIVER_FORM_FACTOR_TYPE <|-- CPAK 
class "SFP" as SFP << (I,Silver) identity>> 
TRANSCEIVER_FORM_FACTOR_TYPE <|-- SFP 
class "SFP_PLUS" as SFP_PLUS << (I,Silver) identity>> 
TRANSCEIVER_FORM_FACTOR_TYPE <|-- SFP_PLUS 
class "XFP" as XFP << (I,Silver) identity>> 
TRANSCEIVER_FORM_FACTOR_TYPE <|-- XFP 
class "X2" as X2 << (I,Silver) identity>> 
TRANSCEIVER_FORM_FACTOR_TYPE <|-- X2 
class "NON_PLUGGABLE" as NON_PLUGGABLE << (I,Silver) identity>> 
TRANSCEIVER_FORM_FACTOR_TYPE <|-- NON_PLUGGABLE 
class "OTHER" as OTHER << (I,Silver) identity>> 
TRANSCEIVER_FORM_FACTOR_TYPE <|-- OTHER 
class "FIBER_CONNECTOR_TYPE" as FIBER_CONNECTOR_TYPE << (I,Silver) identity>> 
class "SC_CONNECTOR" as SC_CONNECTOR << (I,Silver) identity>> 
FIBER_CONNECTOR_TYPE <|-- SC_CONNECTOR 
class "LC_CONNECTOR" as LC_CONNECTOR << (I,Silver) identity>> 
FIBER_CONNECTOR_TYPE <|-- LC_CONNECTOR 
class "MPO_CONNECTOR" as MPO_CONNECTOR << (I,Silver) identity>> 
FIBER_CONNECTOR_TYPE <|-- MPO_CONNECTOR 
class "ETHERNET_PMD_TYPE" as ETHERNET_PMD_TYPE << (I,Silver) identity>> 
class "ETH_10GBASE_LRM" as ETH_10GBASE_LRM << (I,Silver) identity>> 
ETHERNET_PMD_TYPE <|-- ETH_10GBASE_LRM 
class "ETH_10GBASE_LR" as ETH_10GBASE_LR << (I,Silver) identity>> 
ETHERNET_PMD_TYPE <|-- ETH_10GBASE_LR 
class "ETH_10GBASE_ZR" as ETH_10GBASE_ZR << (I,Silver) identity>> 
ETHERNET_PMD_TYPE <|-- ETH_10GBASE_ZR 
class "ETH_10GBASE_ER" as ETH_10GBASE_ER << (I,Silver) identity>> 
ETHERNET_PMD_TYPE <|-- ETH_10GBASE_ER 
class "ETH_10GBASE_SR" as ETH_10GBASE_SR << (I,Silver) identity>> 
ETHERNET_PMD_TYPE <|-- ETH_10GBASE_SR 
class "ETH_40GBASE_CR4" as ETH_40GBASE_CR4 << (I,Silver) identity>> 
ETHERNET_PMD_TYPE <|-- ETH_40GBASE_CR4 
class "ETH_40GBASE_SR4" as ETH_40GBASE_SR4 << (I,Silver) identity>> 
ETHERNET_PMD_TYPE <|-- ETH_40GBASE_SR4 
class "ETH_40GBASE_LR4" as ETH_40GBASE_LR4 << (I,Silver) identity>> 
ETHERNET_PMD_TYPE <|-- ETH_40GBASE_LR4 
class "ETH_40GBASE_ER4" as ETH_40GBASE_ER4 << (I,Silver) identity>> 
ETHERNET_PMD_TYPE <|-- ETH_40GBASE_ER4 
class "ETH_40GBASE_PSM4" as ETH_40GBASE_PSM4 << (I,Silver) identity>> 
ETHERNET_PMD_TYPE <|-- ETH_40GBASE_PSM4 
class "ETH_4X10GBASE_LR" as ETH_4X10GBASE_LR << (I,Silver) identity>> 
ETHERNET_PMD_TYPE <|-- ETH_4X10GBASE_LR 
class "ETH_4X10GBASE_SR" as ETH_4X10GBASE_SR << (I,Silver) identity>> 
ETHERNET_PMD_TYPE <|-- ETH_4X10GBASE_SR 
class "ETH_100G_AOC" as ETH_100G_AOC << (I,Silver) identity>> 
ETHERNET_PMD_TYPE <|-- ETH_100G_AOC 
class "ETH_100G_ACC" as ETH_100G_ACC << (I,Silver) identity>> 
ETHERNET_PMD_TYPE <|-- ETH_100G_ACC 
class "ETH_100GBASE_SR10" as ETH_100GBASE_SR10 << (I,Silver) identity>> 
ETHERNET_PMD_TYPE <|-- ETH_100GBASE_SR10 
class "ETH_100GBASE_SR4" as ETH_100GBASE_SR4 << (I,Silver) identity>> 
ETHERNET_PMD_TYPE <|-- ETH_100GBASE_SR4 
class "ETH_100GBASE_LR4" as ETH_100GBASE_LR4 << (I,Silver) identity>> 
ETHERNET_PMD_TYPE <|-- ETH_100GBASE_LR4 
class "ETH_100GBASE_ER4" as ETH_100GBASE_ER4 << (I,Silver) identity>> 
ETHERNET_PMD_TYPE <|-- ETH_100GBASE_ER4 
class "ETH_100GBASE_CWDM4" as ETH_100GBASE_CWDM4 << (I,Silver) identity>> 
ETHERNET_PMD_TYPE <|-- ETH_100GBASE_CWDM4 
class "ETH_100GBASE_CLR4" as ETH_100GBASE_CLR4 << (I,Silver) identity>> 
ETHERNET_PMD_TYPE <|-- ETH_100GBASE_CLR4 
class "ETH_100GBASE_PSM4" as ETH_100GBASE_PSM4 << (I,Silver) identity>> 
ETHERNET_PMD_TYPE <|-- ETH_100GBASE_PSM4 
class "ETH_100GBASE_CR4" as ETH_100GBASE_CR4 << (I,Silver) identity>> 
ETHERNET_PMD_TYPE <|-- ETH_100GBASE_CR4 
class "ETH_UNDEFINED" as ETH_UNDEFINED << (I,Silver) identity>> 
ETHERNET_PMD_TYPE <|-- ETH_UNDEFINED 
class "SONET_APPLICATION_CODE" as SONET_APPLICATION_CODE << (I,Silver) identity>> 
class "VSR2000_3R2" as VSR2000_3R2 << (I,Silver) identity>> 
SONET_APPLICATION_CODE <|-- VSR2000_3R2 
class "VSR2000_3R3" as VSR2000_3R3 << (I,Silver) identity>> 
SONET_APPLICATION_CODE <|-- VSR2000_3R3 
class "VSR2000_3R5" as VSR2000_3R5 << (I,Silver) identity>> 
SONET_APPLICATION_CODE <|-- VSR2000_3R5 
class "SONET_UNDEFINED" as SONET_UNDEFINED << (I,Silver) identity>> 
SONET_APPLICATION_CODE <|-- SONET_UNDEFINED 
class "OTN_APPLICATION_CODE" as OTN_APPLICATION_CODE << (I,Silver) identity>> 
class "P1L1_2D1" as P1L1_2D1 << (I,Silver) identity>> 
OTN_APPLICATION_CODE <|-- P1L1_2D1 
class "P1S1_2D2" as P1S1_2D2 << (I,Silver) identity>> 
OTN_APPLICATION_CODE <|-- P1S1_2D2 
class "P1L1_2D2" as P1L1_2D2 << (I,Silver) identity>> 
OTN_APPLICATION_CODE <|-- P1L1_2D2 
class "OTN_UNDEFINED" as OTN_UNDEFINED << (I,Silver) identity>> 
OTN_APPLICATION_CODE <|-- OTN_UNDEFINED 
class "TRIBUTARY_RATE_CLASS_TYPE" as TRIBUTARY_RATE_CLASS_TYPE << (I,Silver) identity>> 
class "TRIB_RATE_1G" as TRIB_RATE_1G << (I,Silver) identity>> 
TRIBUTARY_RATE_CLASS_TYPE <|-- TRIB_RATE_1G 
class "TRIB_RATE_2.5G" as TRIB_RATE_2.5G << (I,Silver) identity>> 
TRIBUTARY_RATE_CLASS_TYPE <|-- TRIB_RATE_2.5G 
class "TRIB_RATE_10G" as TRIB_RATE_10G << (I,Silver) identity>> 
TRIBUTARY_RATE_CLASS_TYPE <|-- TRIB_RATE_10G 
class "TRIB_RATE_40G" as TRIB_RATE_40G << (I,Silver) identity>> 
TRIBUTARY_RATE_CLASS_TYPE <|-- TRIB_RATE_40G 
class "TRIB_RATE_100G" as TRIB_RATE_100G << (I,Silver) identity>> 
TRIBUTARY_RATE_CLASS_TYPE <|-- TRIB_RATE_100G 
class "TRIB_RATE_150G" as TRIB_RATE_150G << (I,Silver) identity>> 
TRIBUTARY_RATE_CLASS_TYPE <|-- TRIB_RATE_150G 
class "TRIB_RATE_200G" as TRIB_RATE_200G << (I,Silver) identity>> 
TRIBUTARY_RATE_CLASS_TYPE <|-- TRIB_RATE_200G 
class "TRIB_RATE_250G" as TRIB_RATE_250G << (I,Silver) identity>> 
TRIBUTARY_RATE_CLASS_TYPE <|-- TRIB_RATE_250G 
class "TRIB_RATE_300G" as TRIB_RATE_300G << (I,Silver) identity>> 
TRIBUTARY_RATE_CLASS_TYPE <|-- TRIB_RATE_300G 
class "TRIB_RATE_400G" as TRIB_RATE_400G << (I,Silver) identity>> 
TRIBUTARY_RATE_CLASS_TYPE <|-- TRIB_RATE_400G 
class "LOGICAL_ELEMENT_PROTOCOL_TYPE" as LOGICAL_ELEMENT_PROTOCOL_TYPE << (I,Silver) identity>> 
class "PROT_ETHERNET" as PROT_ETHERNET << (I,Silver) identity>> 
LOGICAL_ELEMENT_PROTOCOL_TYPE <|-- PROT_ETHERNET 
class "PROT_OTN" as PROT_OTN << (I,Silver) identity>> 
LOGICAL_ELEMENT_PROTOCOL_TYPE <|-- PROT_OTN 
class "OPTICAL_CHANNEL" as OPTICAL_CHANNEL << (I,Silver) identity>> 
oc_platform_types_OPENCONFIG_HARDWARE_COMPONENT <|-- OPTICAL_CHANNEL 
} 

center footer
 <size:20> UML Generated : 2019-02-21 00:11 </size>
 endfooter 
@enduml 
