'Download plantuml from http://plantuml.sourceforge.net/ 
'Generate png with java -jar plantuml.jar <file> 
'Output in img/<module>.png 
'If Java spits out memory error increase heap size with java -Xmx1024m  -jar plantuml.jar <file> 
@startuml img/openconfig-packet-match-types.png 
hide empty fields 
hide empty methods 
hide <<case>> circle
hide <<augment>> circle
hide <<choice>> circle
hide <<leafref>> stereotype
hide <<leafref>> circle
page 1x1 
Title openconfig-packet-match-types 
package "oc-inet:openconfig-inet-types" as oc_inet_openconfig_inet_types { 
} 
package "oc-ext:openconfig-extensions" as oc_ext_openconfig_extensions { 
} 
note top of oc_pkt_match_types_openconfig_packet_match_types : <b>Namespace: </b> http://openconfig.net/yang/packet-match-types \n<b>Prefix: </b> oc-pkt-match-types \n<b>Organization : </b>\nOpenConfig working group \n<b>Contact : </b>\nOpenConfig working group \nwww.openconfig.net \n<b>Revision : </b> 2017-05-26 \n
package "oc-pkt-match-types:openconfig-packet-match-types" as oc_pkt_match_types_openconfig_packet_match_types { 
oc_inet_openconfig_inet_types +-- oc_pkt_match_types_openconfig_packet_match_types
oc_ext_openconfig_extensions +-- oc_pkt_match_types_openconfig_packet_match_types
class "openconfig-packet-match-types" as openconfig_packet_match_types << (M, #33CCFF) module>> 
class "port-num-range" as port_num_range << (T, YellowGreen) typedef>>
port_num_range : union{string, oc-inet:port-number}
class "ip-protocol-type" as ip_protocol_type << (T, YellowGreen) typedef>>
ip_protocol_type : union{uint8, identityref}
class "ethertype-type" as ethertype_type << (T, YellowGreen) typedef>>
ethertype_type : union{uint16, identityref}
class "ETHERTYPE" as ETHERTYPE << (I,Silver) identity>> 
class "ETHERTYPE_IPV4" as ETHERTYPE_IPV4 << (I,Silver) identity>> 
ETHERTYPE <|-- ETHERTYPE_IPV4 
class "ETHERTYPE_ARP" as ETHERTYPE_ARP << (I,Silver) identity>> 
ETHERTYPE <|-- ETHERTYPE_ARP 
class "ETHERTYPE_VLAN" as ETHERTYPE_VLAN << (I,Silver) identity>> 
ETHERTYPE <|-- ETHERTYPE_VLAN 
class "ETHERTYPE_IPV6" as ETHERTYPE_IPV6 << (I,Silver) identity>> 
ETHERTYPE <|-- ETHERTYPE_IPV6 
class "ETHERTYPE_MPLS" as ETHERTYPE_MPLS << (I,Silver) identity>> 
ETHERTYPE <|-- ETHERTYPE_MPLS 
class "ETHERTYPE_LLDP" as ETHERTYPE_LLDP << (I,Silver) identity>> 
ETHERTYPE <|-- ETHERTYPE_LLDP 
class "ETHERTYPE_ROCE" as ETHERTYPE_ROCE << (I,Silver) identity>> 
ETHERTYPE <|-- ETHERTYPE_ROCE 
class "IP_PROTOCOL" as IP_PROTOCOL << (I,Silver) identity>> 
class "IP_TCP" as IP_TCP << (I,Silver) identity>> 
IP_PROTOCOL <|-- IP_TCP 
class "IP_UDP" as IP_UDP << (I,Silver) identity>> 
IP_PROTOCOL <|-- IP_UDP 
class "IP_ICMP" as IP_ICMP << (I,Silver) identity>> 
IP_PROTOCOL <|-- IP_ICMP 
class "IP_IGMP" as IP_IGMP << (I,Silver) identity>> 
IP_PROTOCOL <|-- IP_IGMP 
class "IP_PIM" as IP_PIM << (I,Silver) identity>> 
IP_PROTOCOL <|-- IP_PIM 
class "IP_RSVP" as IP_RSVP << (I,Silver) identity>> 
IP_PROTOCOL <|-- IP_RSVP 
class "IP_GRE" as IP_GRE << (I,Silver) identity>> 
IP_PROTOCOL <|-- IP_GRE 
class "IP_AUTH" as IP_AUTH << (I,Silver) identity>> 
IP_PROTOCOL <|-- IP_AUTH 
class "IP_L2TP" as IP_L2TP << (I,Silver) identity>> 
IP_PROTOCOL <|-- IP_L2TP 
class "TCP_FLAGS" as TCP_FLAGS << (I,Silver) identity>> 
class "TCP_SYN" as TCP_SYN << (I,Silver) identity>> 
TCP_FLAGS <|-- TCP_SYN 
class "TCP_FIN" as TCP_FIN << (I,Silver) identity>> 
TCP_FLAGS <|-- TCP_FIN 
class "TCP_RST" as TCP_RST << (I,Silver) identity>> 
TCP_FLAGS <|-- TCP_RST 
class "TCP_PSH" as TCP_PSH << (I,Silver) identity>> 
TCP_FLAGS <|-- TCP_PSH 
class "TCP_ACK" as TCP_ACK << (I,Silver) identity>> 
TCP_FLAGS <|-- TCP_ACK 
class "TCP_URG" as TCP_URG << (I,Silver) identity>> 
TCP_FLAGS <|-- TCP_URG 
class "TCP_ECE" as TCP_ECE << (I,Silver) identity>> 
TCP_FLAGS <|-- TCP_ECE 
class "TCP_CWR" as TCP_CWR << (I,Silver) identity>> 
TCP_FLAGS <|-- TCP_CWR 
} 

center footer
 <size:20> UML Generated : 2019-02-20 23:35 </size>
 endfooter 
@enduml 
